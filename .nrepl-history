(do (println "HI") 4)
(+ 1 2 3 4)
(map inc [1 2 3 4])
(2 3 4 5)
(reduce + [5 6 100])
1
"thi"
["a" "b" 1 2]
(str "this" "is" "cool")
(if true "hi" "there")
(if false "hi" "there")
exit
(or 1 2 3)
(or nil 1)
(or :thisisathing)
(or (= 0 1) (= "yes" "no"))
(def me "richard")
me
1/3
(def age 1/3)
(= 1/2 0,5)
1/2
0.5
{"plus" +}
((get {"plus" +} "plus") 1 1)
'(1 2 3)
(1 2 3)
(vector 1 2 3)
[1 2 3]
(conj '(1 2 3) 4)
(conf 4 '(1 2 3))
#{:one :two}
(:one #{:one :two})
(first [1 2 3 4])
(or + -)
((or + -) 1 2 )
(1 2 3 4)
(map inc (1 2 3))
(map inc [1 2 3])
(defn myfunc
"blah blah"
[name]
(str "Hi there " name)
)
(myfunc "richard")
(doc myfunc)
(defn add
"add it"
([a b] (+ a b))
([a] (+a 1))
)
(defn add
"add it"
([a b] (+ a b))
([a] (+ a 1))
)
(add 2 2)
(add 2)
(defn sweet
"sweet"
[& rest]
(map + rest)
)
(sweet 1 2 3)
(defn sweet
[& params]
(map + params))
(sweet 1 2)
(def plusprint [p] (str "Hi " p))
(defn plusprint [p] (str "Hi " p))
(defn ssw [& params] (map plusprint params))
(ssw "richard" "philip")
["richard" "philip"]
'("richard" "philip")
(defn [[one two]] (+ one two))
(defn newadd [[one two]] (+ one two))
(newadd [1 2])
(newadd '(1 2))
(def x 0)
x
(let [x 1] x)
x
(let [ x (inc x) ] x)
(into [] (set [:a :a]))
(into [] (set [:a]))
(loop [i 0]
(println i)
(if (> i 3)
(println "done")
(recur (inc i)))
)
(reduce + 10 [ 1 2 3 ])
[{:name "r" :size 1}
{:name "p" :size 2}]
(def mylist [{:name "r" :size 1}
{:name "p" :size 2}])
mylist
(reduce + (map :size mylist))
(map :size mylist)
(defn addit [i] (+ i 100))
addit(1)
(addit 1)
(doc addit)
(seq '(1 2 3))
'(1 2 3)
(seq [1 2 3])
(map str ["a" "b" "c"] ["A" "B" "C"])
(map str ["a" "b" "c"] ["A" "B" "C"] [1 2 3])
 (def human-consumption   [8.1 7.3 6.6 5.0])
             (def critter-consumption [0.0 0.2 0.3 1.1])
(defn unify-me [human critter]
{:human human :critter critter}
)
(map unify-me human-consumption critter-consumption)
(def sum #(reduce + %))
(sum [1 2 3])
(add [1 2 3])
(+ [1 2 3] [1 2 3])
(def mydata [1 2 3 4])
(defn myfunc [[x y]] x)
(myfunc mydata)
(defn myfunc [[x y]] y)
(myfunc mydata)
(reduce (fn [newmap [key value]]
(println key)
(assoc newmap key value))
{}
{:human 4 :critter 1})
(take 3 [1 2 3 4 5])
(def vampire-database
  {0 {:makes-blood-puns? false, :has-pulse? true  :name "McFishwich"}
   1 {:makes-blood-puns? false, :has-pulse? true  :name "McMackson"}
   2 {:makes-blood-puns? true,  :has-pulse? false :name "Damon Salvatore"}
   3 {:makes-blood-puns? true,  :has-pulse? true  :name "Mickey Mouse"}})
(defn vampire-related-details
  [social-security-number]
  (Thread/sleep 1000)
  (get vampire-database social-security-number))
(defn vampire?
  [record]
  (and (:makes-blood-puns? record)
       (not (:has-pulse? Record))
       record))
(defn identify-vampire
  [social-security-numbers]
  (first (filter vampire?
(def vampire-database
  {0 {:makes-blood-puns? false, :has-pulse? true  :name "McFishwich"}
   1 {:makes-blood-puns? false, :has-pulse? true  :name "McMackson"}
   2 {:makes-blood-puns? true,  :has-pulse? false :name "Damon Salvatore"}
   3 {:makes-blood-puns? true,  :has-pulse? true  :name "Mickey Mouse"}})
(defn vampire-related-details
  [social-security-number]
  (Thread/sleep 1000)
  (get vampire-database social-security-number))
(defn vampire?
  [record]
  (and (:makes-blood-puns? record)
       (not (:has-pulse? record))
       record))
(defn identify-vampire
  [social-security-numbers]
  (first (filter vampire?
                 (map vampire-related-details social-security-numbers))))
(time (vampire-related-details 0))
(time (def mapped-details (map vampire-related-details (range 0 1000000))))
(time (first mapped-details))
(take 8 (repeat "na"))
(repeatedly (fn [] (rand-int 10)))
(repeatedly (fn [] (println rand-int 10)))
(repeatedly (fn [] (println (rand-int 10))))
(defn even-numbers 
([] (even-numbers 0))
([n] (cons n (lazy-seq (even-numbers (+ n 2)))))
)
(take 10 (even-numbers))
(take 2 (lazy-seq [1 2 3 4]))
(cons 1 '(2 3))
(empty? []_
)
(empty? [])
(map identity {:one 1})
(into {} (map identity {:one 1}))
(identity [1 2 3])
(identity '(1 2 3))
(max 1 2 3)
(max [1 2 3])
(apply max [0 1 2])
exit
(start-repl)
cljs/quit
cljs.quit
exit
(start-repl)
(ns minesweeper.app)
(set-container-html "and this")
(ns minesweeper.app)
(set-container-html "and this")
eit
exit
(ns minesweepter.app)
qui
(start-repl)
exit
(start-repl
)
(ns minesweeper.app)
(set-container-html "cool")
(set-container-html "cool!")
(set-container-html "cool!!!!")
quit
(start-repl)
(ns minesweeper.app)
(str 1 2)
(reset state "lol")
(reset! state "lol")
(reset! state "lol!!!")
quit
(start-repl)
